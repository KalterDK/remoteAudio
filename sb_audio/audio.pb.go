// Code generated by protoc-gen-gogo.
// source: audio.proto
// DO NOT EDIT!

/*
	Package shackbus_audio is a generated protocol buffer package.

	It is generated from these files:
		audio.proto

	It has these top-level messages:
		AudioData
*/
package shackbus_audio

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AudioData struct {
	Channels     int32   `protobuf:"varint,1,opt,name=channels,proto3" json:"channels,omitempty"`
	FrameLength  int32   `protobuf:"varint,2,opt,name=frame_length,json=frameLength,proto3" json:"frame_length,omitempty"`
	SamplingRate int32   `protobuf:"varint,3,opt,name=sampling_rate,json=samplingRate,proto3" json:"sampling_rate,omitempty"`
	Bitrate      int32   `protobuf:"varint,4,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
	Audio        []int32 `protobuf:"zigzag32,6,rep,packed,name=audio" json:"audio,omitempty"`
	UserId       string  `protobuf:"bytes,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *AudioData) Reset()                    { *m = AudioData{} }
func (m *AudioData) String() string            { return proto.CompactTextString(m) }
func (*AudioData) ProtoMessage()               {}
func (*AudioData) Descriptor() ([]byte, []int) { return fileDescriptorAudio, []int{0} }

func (m *AudioData) GetChannels() int32 {
	if m != nil {
		return m.Channels
	}
	return 0
}

func (m *AudioData) GetFrameLength() int32 {
	if m != nil {
		return m.FrameLength
	}
	return 0
}

func (m *AudioData) GetSamplingRate() int32 {
	if m != nil {
		return m.SamplingRate
	}
	return 0
}

func (m *AudioData) GetBitrate() int32 {
	if m != nil {
		return m.Bitrate
	}
	return 0
}

func (m *AudioData) GetAudio() []int32 {
	if m != nil {
		return m.Audio
	}
	return nil
}

func (m *AudioData) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func init() {
	proto.RegisterType((*AudioData)(nil), "shackbus.audio.AudioData")
}
func (m *AudioData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AudioData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channels != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAudio(dAtA, i, uint64(m.Channels))
	}
	if m.FrameLength != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAudio(dAtA, i, uint64(m.FrameLength))
	}
	if m.SamplingRate != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAudio(dAtA, i, uint64(m.SamplingRate))
	}
	if m.Bitrate != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAudio(dAtA, i, uint64(m.Bitrate))
	}
	if len(m.Audio) > 0 {
		dAtA1 := make([]byte, len(m.Audio)*5)
		var j2 int
		for _, num := range m.Audio {
			x3 := (uint32(num) << 1) ^ uint32((num >> 31))
			for x3 >= 1<<7 {
				dAtA1[j2] = uint8(uint64(x3)&0x7f | 0x80)
				j2++
				x3 >>= 7
			}
			dAtA1[j2] = uint8(x3)
			j2++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintAudio(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA1[:j2])
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAudio(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	return i, nil
}

func encodeFixed64Audio(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Audio(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintAudio(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AudioData) Size() (n int) {
	var l int
	_ = l
	if m.Channels != 0 {
		n += 1 + sovAudio(uint64(m.Channels))
	}
	if m.FrameLength != 0 {
		n += 1 + sovAudio(uint64(m.FrameLength))
	}
	if m.SamplingRate != 0 {
		n += 1 + sovAudio(uint64(m.SamplingRate))
	}
	if m.Bitrate != 0 {
		n += 1 + sovAudio(uint64(m.Bitrate))
	}
	if len(m.Audio) > 0 {
		l = 0
		for _, e := range m.Audio {
			l += sozAudio(uint64(e))
		}
		n += 1 + sovAudio(uint64(l)) + l
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovAudio(uint64(l))
	}
	return n
}

func sovAudio(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAudio(x uint64) (n int) {
	return sovAudio(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AudioData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAudio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AudioData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AudioData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
			m.Channels = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channels |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameLength", wireType)
			}
			m.FrameLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrameLength |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SamplingRate", wireType)
			}
			m.SamplingRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SamplingRate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bitrate", wireType)
			}
			m.Bitrate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bitrate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAudio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAudio
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAudio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.Audio = append(m.Audio, v)
				}
			} else if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAudio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.Audio = append(m.Audio, v)
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Audio", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAudio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAudio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAudio(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAudio
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAudio
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAudio
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAudio
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAudio
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAudio(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAudio = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAudio   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("audio.proto", fileDescriptorAudio) }

var fileDescriptorAudio = []byte{
	// 216 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x2c, 0x4d, 0xc9,
	0xcc, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2b, 0xce, 0x48, 0x4c, 0xce, 0x4e, 0x2a,
	0x2d, 0xd6, 0x03, 0x8b, 0x2a, 0xed, 0x61, 0xe4, 0xe2, 0x74, 0x04, 0xb1, 0x5c, 0x12, 0x4b, 0x12,
	0x85, 0xa4, 0xb8, 0x38, 0x92, 0x33, 0x12, 0xf3, 0xf2, 0x52, 0x73, 0x8a, 0x25, 0x18, 0x15, 0x18,
	0x35, 0x58, 0x83, 0xe0, 0x7c, 0x21, 0x45, 0x2e, 0x9e, 0xb4, 0xa2, 0xc4, 0xdc, 0xd4, 0xf8, 0x9c,
	0xd4, 0xbc, 0xf4, 0x92, 0x0c, 0x09, 0x26, 0xb0, 0x3c, 0x37, 0x58, 0xcc, 0x07, 0x2c, 0x24, 0xa4,
	0xcc, 0xc5, 0x5b, 0x9c, 0x98, 0x5b, 0x90, 0x93, 0x99, 0x97, 0x1e, 0x5f, 0x94, 0x58, 0x92, 0x2a,
	0xc1, 0x0c, 0x56, 0xc3, 0x03, 0x13, 0x0c, 0x4a, 0x2c, 0x49, 0x15, 0x92, 0xe0, 0x62, 0x4f, 0xca,
	0x2c, 0x01, 0x4b, 0xb3, 0x80, 0xa5, 0x61, 0x5c, 0x21, 0x09, 0x2e, 0x56, 0xb0, 0xa3, 0x24, 0xd8,
	0x14, 0x98, 0x35, 0x04, 0x9d, 0x98, 0x04, 0x18, 0x83, 0x20, 0x02, 0x42, 0xe2, 0x5c, 0xec, 0xa5,
	0xc5, 0xa9, 0x45, 0xf1, 0x99, 0x29, 0x12, 0xec, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x6c, 0x20, 0xae,
	0x67, 0x8a, 0x93, 0xc0, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7,
	0x38, 0xe3, 0xb1, 0x1c, 0x43, 0x12, 0x1b, 0xd8, 0x9f, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x92, 0x01, 0x2d, 0x7a, 0xf6, 0x00, 0x00, 0x00,
}
