// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: audio.proto

/*
Package shackbus_audio is a generated protocol buffer package.

It is generated from these files:
	audio.proto

It has these top-level messages:
	None
	Capabilities
	PingPong
	Frame
	State
*/
package shackbus_audio

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Server service

type ServerClient interface {
	GetCapabilities(ctx context.Context, in *None, opts ...client.CallOption) (*Capabilities, error)
	GetState(ctx context.Context, in *None, opts ...client.CallOption) (*State, error)
	StartStream(ctx context.Context, in *None, opts ...client.CallOption) (*None, error)
	StopStream(ctx context.Context, in *None, opts ...client.CallOption) (*None, error)
	Ping(ctx context.Context, in *PingPong, opts ...client.CallOption) (*PingPong, error)
}

type serverClient struct {
	c           client.Client
	serviceName string
}

func NewServerClient(serviceName string, c client.Client) ServerClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "shackbus.audio"
	}
	return &serverClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *serverClient) GetCapabilities(ctx context.Context, in *None, opts ...client.CallOption) (*Capabilities, error) {
	req := c.c.NewRequest(c.serviceName, "Server.GetCapabilities", in)
	out := new(Capabilities)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) GetState(ctx context.Context, in *None, opts ...client.CallOption) (*State, error) {
	req := c.c.NewRequest(c.serviceName, "Server.GetState", in)
	out := new(State)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) StartStream(ctx context.Context, in *None, opts ...client.CallOption) (*None, error) {
	req := c.c.NewRequest(c.serviceName, "Server.StartStream", in)
	out := new(None)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) StopStream(ctx context.Context, in *None, opts ...client.CallOption) (*None, error) {
	req := c.c.NewRequest(c.serviceName, "Server.StopStream", in)
	out := new(None)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Ping(ctx context.Context, in *PingPong, opts ...client.CallOption) (*PingPong, error) {
	req := c.c.NewRequest(c.serviceName, "Server.Ping", in)
	out := new(PingPong)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Server service

type ServerHandler interface {
	GetCapabilities(context.Context, *None, *Capabilities) error
	GetState(context.Context, *None, *State) error
	StartStream(context.Context, *None, *None) error
	StopStream(context.Context, *None, *None) error
	Ping(context.Context, *PingPong, *PingPong) error
}

func RegisterServerHandler(s server.Server, hdlr ServerHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Server{hdlr}, opts...))
}

type Server struct {
	ServerHandler
}

func (h *Server) GetCapabilities(ctx context.Context, in *None, out *Capabilities) error {
	return h.ServerHandler.GetCapabilities(ctx, in, out)
}

func (h *Server) GetState(ctx context.Context, in *None, out *State) error {
	return h.ServerHandler.GetState(ctx, in, out)
}

func (h *Server) StartStream(ctx context.Context, in *None, out *None) error {
	return h.ServerHandler.StartStream(ctx, in, out)
}

func (h *Server) StopStream(ctx context.Context, in *None, out *None) error {
	return h.ServerHandler.StopStream(ctx, in, out)
}

func (h *Server) Ping(ctx context.Context, in *PingPong, out *PingPong) error {
	return h.ServerHandler.Ping(ctx, in, out)
}
