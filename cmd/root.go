// Copyright Â© 2016 Tobias Wellnitz, DH1TW <Tobias.Wellnitz@gmail.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package cmd

import (
	"fmt"
	"os"
	"time"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

var cfgFile string

// RootCmd represents the base command when called without any subcommands
var RootCmd = &cobra.Command{
	Use:   "remoteAudio",
	Short: "Client & Server streaming audio application for remote Radios",
	Long: `This application is an audio streaming client and server.
It's main use case is remotely operating amateur radios.
	
The application supports the following transportation protocols:
	- MQTT
	- TCP
	- UDP

and the following Audio Codecs:
	- OPUS
	- PCM

An extensive set of configuration parameters allow you to adjust the
application to your needs. The parameters can either be set throug the
console or in a config file.
	`,
	// Uncomment the following line if your bare application
	// has an action associated with it:
	//	Run: func(cmd *cobra.Command, args []string) { },
}

// Execute adds all child commands to the root command sets flags appropriately.
// This is called by main.main(). It only needs to happen once to the rootCmd.
func Execute() {
	if err := RootCmd.Execute(); err != nil {
		fmt.Println(err)
		os.Exit(-1)
	}
}

func init() {
	cobra.OnInitialize(initConfig)

	// Here you will define your flags and configuration settings.
	// Cobra supports Persistent Flags, which, if defined here,
	// will be global for your application.

	RootCmd.PersistentFlags().StringVar(&cfgFile, "config", "", "config file (default is $HOME/.remoteAudio.yaml)")
	// Cobra also supports local flags, which will only run
	// when this action is called directly.
	RootCmd.Flags().BoolP("toggle", "t", false, "Help message for toggle")
	RootCmd.PersistentFlags().StringP("input_device_name", "i", "default", "Input device")
	RootCmd.PersistentFlags().Float64("input_device_sampling_rate", 48000, "Input device sampling rate")
	RootCmd.PersistentFlags().Duration("input_device_latency", time.Millisecond*5, "Input latency")
	RootCmd.PersistentFlags().String("input_device_channels", "mono", "Input Channels")

	RootCmd.PersistentFlags().StringP("output_device_name", "o", "default", "Output device")
	RootCmd.PersistentFlags().Float64("output_device_sampling_rate", 48000, "Output device sampling rate")
	RootCmd.PersistentFlags().Duration("output_device_latency", time.Millisecond*5, "Output latency")
	RootCmd.PersistentFlags().String("output_device_channels", "stereo", "Output Channels")

	RootCmd.PersistentFlags().Float64("pcm_samplingrate", 16000, "pcm sampling rate")
	RootCmd.PersistentFlags().Int("pcm_bitdepth", 16, "pcm audio bit depth")
	RootCmd.PersistentFlags().String("pcm_channels", "stereo", "pcm audio Channels")
	RootCmd.PersistentFlags().Int("pcm_resampling_quality", 1, "pcm resampling quality")

	RootCmd.PersistentFlags().String("opus_application", "restricted_lowdelay", "profile for opus encoder")
	RootCmd.PersistentFlags().Int("opus_bitrate", 32000, "Bitrate (bits/sec) generated by the opus encoder")
	RootCmd.PersistentFlags().Int("opus_complexity", 9, "Computational complexity of opus encoder")
	RootCmd.PersistentFlags().String("opus_max_bandwidth", "wideband", "maximum bandwidth of opus encoder")

	RootCmd.PersistentFlags().IntP("audio_frame_length", "f", 480, "Amount of audio samples in one frame")
	RootCmd.PersistentFlags().IntP("rx_buffer_length", "R", 10, "Buffer length (in frames) for incoming Audio packets")
	RootCmd.PersistentFlags().StringP("codec", "C", "opus", "Audio codec")

	RootCmd.PersistentFlags().StringP("user_id", "U", "", "Your User ID - required for TX")

	viper.BindPFlag("input_device.device_name", RootCmd.PersistentFlags().Lookup("input_device_name"))
	viper.BindPFlag("input_device.samplingrate", RootCmd.PersistentFlags().Lookup("input_device_sampling_rate"))
	viper.BindPFlag("input_device.latency", RootCmd.PersistentFlags().Lookup("input_device_latency"))
	viper.BindPFlag("input_device.channels", RootCmd.PersistentFlags().Lookup("input_device_channels"))

	viper.BindPFlag("output_device.device_name", RootCmd.PersistentFlags().Lookup("output_device_name"))
	viper.BindPFlag("output_device.samplingrate", RootCmd.PersistentFlags().Lookup("output_device_sampling_rate"))
	viper.BindPFlag("output_device.latency", RootCmd.PersistentFlags().Lookup("output_device_latency"))
	viper.BindPFlag("output_device.channels", RootCmd.PersistentFlags().Lookup("output_device_channels"))

	viper.BindPFlag("pcm.framelength", RootCmd.PersistentFlags().Lookup("pcm_framelength"))
	viper.BindPFlag("pcm.samplingrate", RootCmd.PersistentFlags().Lookup("pcm_samplingrate"))
	viper.BindPFlag("pcm.bitdepth", RootCmd.PersistentFlags().Lookup("pcm_bitdepth"))
	viper.BindPFlag("pcm.channels", RootCmd.PersistentFlags().Lookup("pcm_channels"))
	viper.BindPFlag("pcm.resampling_quality", RootCmd.PersistentFlags().Lookup("resampling_quality"))

	viper.BindPFlag("opus.application", RootCmd.PersistentFlags().Lookup("opus_application"))
	viper.BindPFlag("opus.bitrate", RootCmd.PersistentFlags().Lookup("opus_bitrate"))
	viper.BindPFlag("opus.complexity", RootCmd.PersistentFlags().Lookup("opus_complexity"))
	viper.BindPFlag("opus.max_bandwidth", RootCmd.PersistentFlags().Lookup("opus_max_bandwidth"))

	viper.BindPFlag("audio.frame_length", RootCmd.PersistentFlags().Lookup("audio_frame_length"))
	viper.BindPFlag("audio.rx_buffer_length", RootCmd.PersistentFlags().Lookup("rx_buffer_length"))
	viper.BindPFlag("audio.codec", RootCmd.PersistentFlags().Lookup("codec"))

	viper.BindPFlag("general.user_id", RootCmd.PersistentFlags().Lookup("user_id"))

}

// initConfig reads in config file and ENV variables if set.
func initConfig() {
	if cfgFile != "" { // enable ability to specify config file via flag
		viper.SetConfigFile(cfgFile)
	}

	viper.SetConfigName(".remoteAudio") // name of config file (without extension)
	viper.AddConfigPath("$HOME")        // adding home directory as first search path
	viper.AutomaticEnv()                // read in environment variables that match

	// If a config file is found, read it in.
	if err := viper.ReadInConfig(); err == nil {
		fmt.Println("Using config file:", viper.ConfigFileUsed())
	}
}
