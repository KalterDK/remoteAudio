// Code generated by protoc-gen-gogo.
// source: mqttaudio.proto
// DO NOT EDIT!

/*
	Package icd is a generated protocol buffer package.

	It is generated from these files:
		mqttaudio.proto

	It has these top-level messages:
		AudioData
*/
package icd

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AudioData struct {
	Channels         *int32  `protobuf:"varint,1,opt,name=channels" json:"channels,omitempty"`
	FrameLength      *int32  `protobuf:"varint,2,opt,name=frame_length,json=frameLength" json:"frame_length,omitempty"`
	SamplingRate     *int32  `protobuf:"varint,3,opt,name=sampling_rate,json=samplingRate" json:"sampling_rate,omitempty"`
	Bitrate          *int32  `protobuf:"varint,4,opt,name=bitrate" json:"bitrate,omitempty"`
	Audio            []int32 `protobuf:"zigzag32,6,rep,packed,name=audio" json:"audio,omitempty"`
	UserId           *string `protobuf:"bytes,7,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AudioData) Reset()                    { *m = AudioData{} }
func (m *AudioData) String() string            { return proto.CompactTextString(m) }
func (*AudioData) ProtoMessage()               {}
func (*AudioData) Descriptor() ([]byte, []int) { return fileDescriptorMqttaudio, []int{0} }

func (m *AudioData) GetChannels() int32 {
	if m != nil && m.Channels != nil {
		return *m.Channels
	}
	return 0
}

func (m *AudioData) GetFrameLength() int32 {
	if m != nil && m.FrameLength != nil {
		return *m.FrameLength
	}
	return 0
}

func (m *AudioData) GetSamplingRate() int32 {
	if m != nil && m.SamplingRate != nil {
		return *m.SamplingRate
	}
	return 0
}

func (m *AudioData) GetBitrate() int32 {
	if m != nil && m.Bitrate != nil {
		return *m.Bitrate
	}
	return 0
}

func (m *AudioData) GetAudio() []int32 {
	if m != nil {
		return m.Audio
	}
	return nil
}

func (m *AudioData) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func init() {
	proto.RegisterType((*AudioData)(nil), "icd.AudioData")
}
func (m *AudioData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AudioData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channels != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMqttaudio(dAtA, i, uint64(*m.Channels))
	}
	if m.FrameLength != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMqttaudio(dAtA, i, uint64(*m.FrameLength))
	}
	if m.SamplingRate != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMqttaudio(dAtA, i, uint64(*m.SamplingRate))
	}
	if m.Bitrate != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMqttaudio(dAtA, i, uint64(*m.Bitrate))
	}
	if len(m.Audio) > 0 {
		dAtA1 := make([]byte, len(m.Audio)*5)
		var j2 int
		for _, num := range m.Audio {
			x3 := (uint32(num) << 1) ^ uint32((num >> 31))
			for x3 >= 1<<7 {
				dAtA1[j2] = uint8(uint64(x3)&0x7f | 0x80)
				j2++
				x3 >>= 7
			}
			dAtA1[j2] = uint8(x3)
			j2++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintMqttaudio(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA1[:j2])
	}
	if m.UserId != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintMqttaudio(dAtA, i, uint64(len(*m.UserId)))
		i += copy(dAtA[i:], *m.UserId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Mqttaudio(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Mqttaudio(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMqttaudio(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AudioData) Size() (n int) {
	var l int
	_ = l
	if m.Channels != nil {
		n += 1 + sovMqttaudio(uint64(*m.Channels))
	}
	if m.FrameLength != nil {
		n += 1 + sovMqttaudio(uint64(*m.FrameLength))
	}
	if m.SamplingRate != nil {
		n += 1 + sovMqttaudio(uint64(*m.SamplingRate))
	}
	if m.Bitrate != nil {
		n += 1 + sovMqttaudio(uint64(*m.Bitrate))
	}
	if len(m.Audio) > 0 {
		l = 0
		for _, e := range m.Audio {
			l += sozMqttaudio(uint64(e))
		}
		n += 1 + sovMqttaudio(uint64(l)) + l
	}
	if m.UserId != nil {
		l = len(*m.UserId)
		n += 1 + l + sovMqttaudio(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMqttaudio(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMqttaudio(x uint64) (n int) {
	return sovMqttaudio(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AudioData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMqttaudio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AudioData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AudioData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMqttaudio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Channels = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameLength", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMqttaudio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FrameLength = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SamplingRate", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMqttaudio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SamplingRate = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bitrate", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMqttaudio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bitrate = &v
		case 6:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMqttaudio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMqttaudio
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMqttaudio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.Audio = append(m.Audio, v)
				}
			} else if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMqttaudio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.Audio = append(m.Audio, v)
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Audio", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMqttaudio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMqttaudio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UserId = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMqttaudio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMqttaudio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMqttaudio(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMqttaudio
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMqttaudio
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMqttaudio
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMqttaudio
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMqttaudio
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMqttaudio(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMqttaudio = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMqttaudio   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("mqttaudio.proto", fileDescriptorMqttaudio) }

var fileDescriptorMqttaudio = []byte{
	// 207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0x2d, 0x2c, 0x29,
	0x49, 0x2c, 0x4d, 0xc9, 0xcc, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xce, 0x4c, 0x4e,
	0x51, 0xda, 0xc3, 0xc8, 0xc5, 0xe9, 0x08, 0x12, 0x74, 0x49, 0x2c, 0x49, 0x14, 0x92, 0xe2, 0xe2,
	0x48, 0xce, 0x48, 0xcc, 0xcb, 0x4b, 0xcd, 0x29, 0x96, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0d, 0x82,
	0xf3, 0x85, 0x14, 0xb9, 0x78, 0xd2, 0x8a, 0x12, 0x73, 0x53, 0xe3, 0x73, 0x52, 0xf3, 0xd2, 0x4b,
	0x32, 0x24, 0x98, 0xc0, 0xf2, 0xdc, 0x60, 0x31, 0x1f, 0xb0, 0x90, 0x90, 0x32, 0x17, 0x6f, 0x71,
	0x62, 0x6e, 0x41, 0x4e, 0x66, 0x5e, 0x7a, 0x7c, 0x51, 0x62, 0x49, 0xaa, 0x04, 0x33, 0x58, 0x0d,
	0x0f, 0x4c, 0x30, 0x28, 0xb1, 0x24, 0x55, 0x48, 0x82, 0x8b, 0x3d, 0x29, 0xb3, 0x04, 0x2c, 0xcd,
	0x02, 0x96, 0x86, 0x71, 0x85, 0x24, 0xb8, 0x58, 0xc1, 0xee, 0x93, 0x60, 0x53, 0x60, 0xd6, 0x10,
	0x74, 0x62, 0x12, 0x60, 0x0c, 0x82, 0x08, 0x08, 0x89, 0x73, 0xb1, 0x97, 0x16, 0xa7, 0x16, 0xc5,
	0x67, 0xa6, 0x48, 0xb0, 0x2b, 0x30, 0x6a, 0x70, 0x06, 0xb1, 0x81, 0xb8, 0x9e, 0x29, 0x4e, 0x02,
	0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x8c, 0xc7, 0x72,
	0x0c, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9a, 0xc0, 0x64, 0x37, 0xe7, 0x00, 0x00, 0x00,
}
